#!/usr/bin/env python3

import os
import os.path
import readline
import subprocess
import sys
import threading
import time


def init_readline():
    # TODO: tab completer
    readline.parse_and_bind('tab: complete')


def control_code(fn):
    def wrap(*args, **kw):
        ch = fn(*args)
        sys.stdout.write(ch)
    return wrap

class ANSI:
    @control_code
    def save_cursor():
        return '\x1B[s'

    @control_code
    def restore_cursor():
        return '\x1B[u'

    @control_code
    def clear_line():
        return '\x1B[2K'

    @control_code
    def start_of_line():
        return '\x1B[0G'

    @control_code
    def start_of_prev():
        return '\x1B[1F'

    @control_code
    def start_of_next():
        return '\x1B[1E'

    @control_code
    def cursor_up(amt):
        return '\r\x1B[%sA' % amt

    @control_code
    def cursor_down(amt):
        return '\r\x1B[%sB' % amt

    @control_code
    def reset():
        return '\x1Bc'


_LOCK = threading.Lock()

class sync_write:
    def __enter__(self):
        _LOCK.acquire()
    def __exit__(self, type, value, traceback):
        readline.redisplay()
        _LOCK.release()


def _tail_buffer(buf):
    out = os.path.join(buf, '__out')
    proc = subprocess.Popen(
        ['tail', '-1000', '-F', out],
        stdout=subprocess.PIPE)

    for line in proc.stdout:
        line = line.decode('utf-8').rstrip()

        with sync_write():
            ANSI.clear_line()
            ANSI.start_of_line()
            print(line)
            ANSI.start_of_next()

            readline.redisplay()


def tail_buffer(buf):
    threading.Thread(target=_tail_buffer, args=[buf], daemon=True).start()


def _input_loop(buf):
    inp = os.path.join(buf, '__in')
    base = os.path.basename(buf.rstrip('/'))

    prompt = '\x1B[40m\x1B[37m[%s]\x1B[0m ' % base

    def write_line(line):
        b = (line + '\n').encode('utf-8')
        with open(inp, 'wb', buffering=0) as fifo:
            fifo.write(b)

    while True:
        try:
            line = input(prompt).strip()

            with sync_write():
                ANSI.start_of_prev()
                ANSI.clear_line()
                ANSI.start_of_next()

            if line == '':
                continue

            write_line(line)

        except EOFError:
            break


def input_loop(buf):
    threading.Thread(target=_input_loop, args=[buf]).start()


def main():
    if len(sys.argv) != 2:
        print('usage: %s PATH' % sys.argv[0])
        sys.exit(1)

    buf = sys.argv[1]
    if not os.path.exists(buf):
        print('%s: no such directory' % buf)
        sys.exit(1)

    init_readline()

    print('placeholder > ')

    input_loop(buf)
    tail_buffer(buf)


if __name__ == '__main__':
    main()
